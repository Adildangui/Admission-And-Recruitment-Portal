import ast

class Attachment(object): 
	
	def __inti__(self):

		self._AttachmentName = ""
		self._AttachmentLabel = ""
		self._AttachmentType = "File"
		self._MultipleEntries = False
		self._IsOptional = False

        @property
        def AttachmentName(self):
                return self._AttachmentName

        @AttachmentName.setter
        def AttachmentName(self,attachmentName):
                if (type(attachmentName) is not str):
                        raise ValueError('AttachmentName must be type String')
                self._AttachmentName = str(attachmentName)

        @property
        def AttachmentLabel(self):
                return self._AttachmentLabel

        @AttachmentLabel.setter
        def AttachmentLabel(self,attachmentLabel):
                if (type(attachmentLabel) is not str):
                        raise ValueError('PersonalLabel must be type String')
                self._AttachmentLabel = str(attachmentLabel)

        @property
        def AttachmentType(self):
                return self._AttachmentType

        @AttachmentType.setter
        def AttachmentType(self,attachmentType):
                if (type(attachmentType) is not str):
                        raise ValueError('PersonalLabel must be type String')
                self._AttachmentType = str(attachmentType)

	@property
        def MultipleEntries(self):
                return self._MultipleEntries

        @MultipleEntries.setter
        def MultipleEntries(self,multipleEntries):
                if (not isinstance(ast.literal_eval(str(multipleEntries)),bool)):
                        raise ValueError('MultipleEntries must be type Boolean')
                self._MultipleEntries = ast.literal_eval(str(multipleEntries))

        @property
        def IsOptional(self):
                return self._IsOptional

        @IsOptional.setter
        def IsOptional(self,isOptional):
                if (not isinstance(ast.literal_eval(str(isOptional)),bool)):
                        raise ValueError('IsOptional must be type Boolean')
                self._IsOptional = ast.literal_eval(str(isOptional))
